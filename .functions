# Lists all the functions in this file
function functions () {
  grep 'function ' ~/.functions | cut -d ' ' -f 2
}

# Open the daily.md file and prepend the date if it doesn’t exist
function daily () {
  local TODAY=`(date +%F)`
  local DATE_IN_FILE=`(head -1 /db/Tasks/daily.md)`
  if [ $TODAY != $DATE_IN_FILE ]
  then
    ex -s -c "1i| " -c "1i|- [ ] " -c "1i|===" -c "1i|$TODAY" -c x /db/Tasks/daily.md
    sed -i.bak "4s/ //g" /db/Tasks/daily.md
  fi
  bbedit /db/Tasks/ref.md /db/Tasks/future.md /db/Tasks/daily.md:3:7
}

# Use ditto to make a nice, recursive zip without resource forks
function dzip () {
  ditto -ck --norsrc --keepParent $1 $1.zip
}

# Make a directory, cd into it
function md () {
  mkdir -p "$@" && cd "$@"
}

# Make a tar.gz file
function mktgz () {
  tar -czf $1.tgz $1;
}

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
function dataurl () {
  echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Determine size of a file or total size of a directory
function fs () {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# Get gzipped file size
function gz () {
  echo "orig size (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

# Base64 image to clipboard
function b64copy () {
  cat "$1" | openssl base64 | tr -d '\n' | pbcopy
}

# Opens the Sublime project in the current folder or defaults to just the folder
# function ss () {
#   PROJ=`find . -name ./*.sublime-project | awk 'NR==1'`

#   if [ -z "$PROJ" ]; then
#     subl .
#   else
#     subl $PROJ
#   fi
# }

# Install a grunt plugin and save to devDependencies
function gi () {
  npm install --save-dev grunt-"$@"
}

# Install a grunt-contrib plugin and save to devDependencies
function gci () {
  npm install --save-dev grunt-contrib-"$@"
}

# Take this repo and copy it to somewhere else minus the .git stuff.
function gitexport () {
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}

# Clean this repo after running BFG
function gitclean () {
  git reflog expire --expire=now --all
  git gc --prune=now --aggressive
}

# Hide errors for npm ls
function npmls () {
  npm ls --depth=0 $@ 2>/dev/null
}

# Start an HTTP server from a directory, optionally specifying the port
function server () {
  local port="${1:-8000}"
  # open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  sudo python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP web server from a directory, optionally specifying the port
function phpserver () {
  local port="${1:-8000}"
  sudo php -S 0.0.0.0:$port
}

# Generate an epub file form the CWD
# Must pass a filename
function epub() {
   zip -q0X $@ mimetype; zip -qXr9D $@ *
}

# Takes a .mov file and converts it to an animated GIF
# https://gist.github.com/SlexAxton/4989674/
function movtogif() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "Proper usage: movtogif <input_movie.mov>. You need to include extension."
  fi
}

# Takes two screenshots: 320px & 600px
function mobile-screens () {
  EXT=${3:-jpg}

  phantomjs ~/bin/rasterize.js "$1" "$2-320.$EXT" "320px"
  phantomjs ~/bin/rasterize.js "$1" "$2-600.$EXT" "600px"

  find . -name "$2-*.$EXT" | imageoptim -a
}

# Takes five responsive screenshots of a website for using with assignments
function rwd-screens () {
  slimerjs ~/bin/slimer-rasterize.js "$1"
  # find . -maxdepth 1 -name "*.jpg" | imageoptim -a
}

# This function uses PhantomJs which isn’t working on my computer
# function rwd-screens () {
#   EXT=${3:-jpg}

#   phantomjs ~/bin/rasterize.js "$1" "$2-xs.$EXT" "240px"
#   phantomjs ~/bin/rasterize.js "$1" "$2-s.$EXT" "400px"
#   phantomjs ~/bin/rasterize.js "$1" "$2-m.$EXT" "650px"
#   phantomjs ~/bin/rasterize.js "$1" "$2-l.$EXT" "980px"
#   phantomjs ~/bin/rasterize.js "$1" "$2-xl.$EXT" "1440px"

#   find . -name "$2-*.$EXT" | imageoptim -a
# }

# This function copies all the default Markbot files into the current folder
function markbot () {
  cp -nR /www/markbot-template/.markbot.yml .
  cp -nR /www/markbot-template/.gitignore .
  cp -nR /www/markbot-template/.gitattributes .
  cp -nR /www/markbot-template/.editorconfig .
  cp -nR /www/markbot-template/README-exercise.md .
  cp -nR /www/markbot-template/README-lesson.md .
  cp -nR /www/markbot-template/README-activity-download.md .
}

# Get separate function files
source ~/.functions-browsers
